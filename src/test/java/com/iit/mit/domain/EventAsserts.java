package com.iit.mit.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EventAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAllPropertiesEquals(Event expected, Event actual) {
        assertEventAutoGeneratedPropertiesEquals(expected, actual);
        assertEventAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAllUpdatablePropertiesEquals(Event expected, Event actual) {
        assertEventUpdatableFieldsEquals(expected, actual);
        assertEventUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAutoGeneratedPropertiesEquals(Event expected, Event actual) {
        assertThat(expected)
            .as("Verify Event auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventUpdatableFieldsEquals(Event expected, Event actual) {
        assertThat(expected)
            .as("Verify Event relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getAudience()).as("check audience").isEqualTo(actual.getAudience()))
            .satisfies(e -> assertThat(e.getLevel()).as("check level").isEqualTo(actual.getLevel()))
            .satisfies(e -> assertThat(e.getLanguage()).as("check language").isEqualTo(actual.getLanguage()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getStartTime()).as("check startTime").isEqualTo(actual.getStartTime()))
            .satisfies(e -> assertThat(e.getEndTime()).as("check endTime").isEqualTo(actual.getEndTime()))
            .satisfies(e -> assertThat(e.getEventType()).as("check eventType").isEqualTo(actual.getEventType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventUpdatableRelationshipsEquals(Event expected, Event actual) {
        assertThat(expected)
            .as("Verify Event relationships")
            .satisfies(e -> assertThat(e.getConference()).as("check conference").isEqualTo(actual.getConference()));
    }
}
